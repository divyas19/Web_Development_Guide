------------------------------------------Basic

Here's the major benefit of using TypeScript presented line by line:

Static Typing: TypeScript's static typing allows errors to be caught during compile-time rather than runtime, reducing the likelihood of bugs in production.
Enhanced IDE Support: TypeScript provides powerful IntelliSense, offering accurate code completions and documentation in supported IDEs, and enhanced support for refactoring.
Improved Maintainability: Type annotations serve as documentation, making it easier to understand the codebase, and enforced type contracts ensure consistent APIs.
Scalability: TypeScript promotes a modular code structure, facilitating better organization and scalability of large applications.
Compatibility with Modern JavaScript: TypeScript supports the latest JavaScript features and transpiles them to older versions, ensuring broad compatibility.
Incremental Adoption: TypeScript can be gradually introduced into existing JavaScript projects, allowing teams to benefit from its features without a complete rewrite.
Robust Tooling Ecosystem: Enhanced support for linting, code formatting tools, and better integration with testing frameworks and tools.
Enhanced Code Navigation: Easily navigate to variable definitions, function implementations, and find all references, improving the developer experience.
Large Community and Ecosystem: TypeScript has a large and active community, providing extensive resources, libraries, and support, with strong support from modern frameworks like Angular, React, and Vue.


For building Libraries use interface else use type

------------------------------------------props

type GreetProps = {
  name: string
}

export const Greet = (props: GreetProps) => {
  
  return (
    <div>
          Hey {props.name}! You have unread messages.
    </div>
  )
}

//Other Folder

<Greet name="ABC" />

-------------------------------------
