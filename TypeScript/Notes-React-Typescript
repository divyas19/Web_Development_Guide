------------------------------------------Basic

Here's the major benefit of using TypeScript presented line by line:

Static Typing: TypeScript's static typing allows errors to be caught during compile-time rather than runtime, reducing the likelihood of bugs in production.
Enhanced IDE Support: TypeScript provides powerful IntelliSense, offering accurate code completions and documentation in supported IDEs, and enhanced support for refactoring.
Improved Maintainability: Type annotations serve as documentation, making it easier to understand the codebase, and enforced type contracts ensure consistent APIs.
Scalability: TypeScript promotes a modular code structure, facilitating better organization and scalability of large applications.
Compatibility with Modern JavaScript: TypeScript supports the latest JavaScript features and transpiles them to older versions, ensuring broad compatibility.
Incremental Adoption: TypeScript can be gradually introduced into existing JavaScript projects, allowing teams to benefit from its features without a complete rewrite.
Robust Tooling Ecosystem: Enhanced support for linting, code formatting tools, and better integration with testing frameworks and tools.
Enhanced Code Navigation: Easily navigate to variable definitions, function implementations, and find all references, improving the developer experience.
Large Community and Ecosystem: TypeScript has a large and active community, providing extensive resources, libraries, and support, with strong support from modern frameworks like Angular, React, and Vue.


For building Libraries use interface else use type

------------------------------------------props-------------------------------------------

type GreetProps = {
  name: string
  messageCount?: number
  isLoggedIn: boolean
}

export const Greet = (props: GreetProps) => {
  const { messageCount = 0 } = props
  return (
    <div>
      {props.isLoggedIn ? (
        <h2>
          Hey {props.name}! You have {messageCount} unread messages
        </h2>
      ) : (
        <h2>Welcome Guest</h2>
      )}
    </div>
  )
}

//Other Folder

<Greet name='Vishwas' isLoggedIn={false} />


Person.types.ts 

export type Name = {
  first: string
  last: string
}
export type PersonProps = {
  name: Name
}

Person.tsx

import { PersonProps } from './Person.types'

export const Person = (props: PersonProps) => {
  return (
    <h2>
      {props.name.first} {props.name.last}
    </h2>
  )
}

PersonList.tsx

import { Name } from './Person.types'

type PersonListProps = {
  names: Name[]
}

export const PersonList = (props: PersonListProps) => {
  return (
    <div>
      {props.names.map(name => {
        return (
          <h2 key={name.first}>
            {name.first} {name.last}
          </h2>
        )
      })}
    </div>
  )
}

Status.tsx

type StatusProps = {
  status: 'loading' | 'success' | 'error'
}

export const Status = (props: StatusProps) => {
  let message
  if (props.status === 'loading') {
    message = 'Loading...'
  } else if (props.status === 'success') {
    message = 'Data fetched successfully!'
  } else if (props.status === 'error') {
    message = 'Error fetching data'
  }
  return <h2>Status - {message}</h2>
}

Heading.tsx

type HeadingProps = {
  children: string
}

export const Heading = (props: HeadingProps) => {
  return <h2>{props.children}</h2>
}

Oscar.tsx

type OscarProps = {
  children: React.ReactNode
}

export const Oscar = (props: OscarProps) => {
  return <div>{props.children}</div>
}

Button.tsx 

type ButtonProps = {
  handleClick: (event: React.MouseEvent<HTMLButtonElement>, id: number) => void
}

export const Button = (props: ButtonProps) => {
  return <button onClick={event => props.handleClick(event, 1)}>Click</button>
}

Input.tsx

type InputProps = {
  value: string
  handleChange: (event: React.ChangeEvent<HTMLInputElement>) => void
}

export const Input = ({ value, handleChange }: InputProps) => {
  // const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {
  //   console.log(event)
  // }
  return <input type='text' value={value} onChange={handleChange} />
}

Container.tsx

type ContainerProps= {
  styles: React.CSSProperties
}

export const Container = (props: ContainerProps) => {
  return (
    <div style={props.styles}>
      Text content goes here
    </div>
  )
}

App.tsx

function App() {
  const personName = {
    first: 'Bruce',
    last: 'Wayne'
  }

  const nameList = [
    {
      first: 'Bruce',
      last: 'Wayne'
    },
    {
      first: 'Clark',
      last: 'Kent'
    },
    {
      first: 'Princess',
      last: 'Diana'
    }
  ]

  return (
    <div className='App'>
      <Greet name='Vishwas' isLoggedIn={false} />
      <Person name={personName} />
      <PersonList names={nameList} />
      <Status status='loading' />
      <Heading>Placeholder text</Heading>
      <Oscar>
        <Heading>Oscar goes to Dicaprio</Heading>
      </Oscar>
      <Button
        handleClick={(event, id) => {
          console.log('Button clicked', event, id)
        }}
      />
     <Input value='' handleChange={event => console.log(event)} />
  <Container styles={{ border: '1px solid black', padding: '1rem' }} />
    </div>
  )
}

export default App

---------------------------------useState Hook---------------------------------------
LoggedIn.tsx

import { useState } from 'react'

export const LoggedIn = () => {
  const [isLoggedIn, setIsLoggedIn] = useState(false)
  const handleLogin = () => {
    setIsLoggedIn(true)
  }
  const handleLogout = () => {
    setIsLoggedIn(false)
  }
  return (
    <div>
      <button onClick={handleLogin}>Login</button>
      <button onClick={handleLogout}>Logout</button>
      <div>User is {isLoggedIn ? 'logged in' : 'logged out'}</div>
    </div>
  )
}

User.tsx

import { useState } from 'react'

type AuthUser = {
  name: string
  email: string
}

export const User = () => {
  const [user, setUser] = useState<AuthUser | null>(null)
  const handleLogin = () => {
    setUser({
      name: 'Vishwas',
      email: 'vishwas@example.com'
    })
  }
  const handleLogout = () => {
    setUser(null)
  }
  return (
    <div>
      <button onClick={handleLogin}>Login</button>
      <button onClick={handleLogout}>Logout</button>
      <div>User name is {user?.name}</div>
    </div>
  )
}

---Type Assertion

import { useState } from 'react';

type AuthUser = {
  name: string;
  email: string;
};

export const User = () => {
  const [user, setUser] = useState<AuthUser>({} as AuthUser);

  const handleLogin = () => {
    setUser({
      name: 'Vishwas',
      email: 'vishwas@example.com',
    });
  };

  const handleLogout = () => {
    setUser({} as AuthUser);
  };

  return (
    <div>
      <button onClick={handleLogin}>Login</button>
      <button onClick={handleLogout}>Logout</button>
      {user.name ? (
        <div>
          <div>User name is {user.name}</div>
          <div>User email is {user.email}</div>
        </div>
      ) : (
        <div>No user logged in</div>
      )}
    </div>
  );
};


----------------------------------useReducer

-------------------------------useContext
