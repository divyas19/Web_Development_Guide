----------------------------------------Basics----------------------------------------

Alternative to JavaScript(Super Set)
Allows us to use strict type
Supports Modern Features (arrow functions, let, const)
Extra features (generics, interfaces, tupples etc)

------------------------Setup in JS------------------------ 

Create a sandbox.ts file and put command

tsc sandbox.ts sandbox.js
If name is same for js file
tsc sandbox.ts
tsc sandbox.ts -w //For running command only once

------------------------Better Workflow and tscongig------------------------

put deploy in public 
put ts in src

tsc src/sandbox.ts

or

tsc --init  gives tsconfig 

change 
    "rootDir": "./src" /* Specify the root folder within your source files. */,
    "outDir": "./public" /* Specify an output folder for all emitted files. */,
  },
  "include": ["src"]
}

src so that anything outside src is not put in public only src files are available in public

------------------------Extra-----------------------------------

. (Dot)
Current Directory:

The single dot (.) refers to the current working directory.
When used in commands, it indicates the current directory without needing to specify the full path.

/ (Slash)
Root Directory:

A single slash (/) at the beginning of a path denotes the root directory of the file system.
For example, /home/user refers to the user directory inside the home directory, which is located at the root of the file system.
Path Separator:

The slash is used as a separator between directories in a file path.
For example, home/user/documents indicates the path from the home directory to the user directory to the documents directory.

------------------------Basic Data Types------------------------

const fname = "riya";
console.log(fname);

const func = (num: number) => console.log(num * Math.PI);

func(100);

let fruits = ["apple", "banana", "mango", 9, true];

fruits.push("guava");

fruits.push(false);

let veg = {
  yellow: "pumpkin",
  orange: "tomato",
};

// veg.purple = "brinjal"; //Not allowed

veg = {
  yellow: "mango",
  orange: "tomato",
};

// arrays
let names = ['luigi', 'mario', 'yoshi'];

names.push('toad');
// names.push(3); //Not allowed
// names[1] = 3; //Not allowed

let numbers = [10, 20, 12, 15];

numbers.push(25);
// numbers.push('shaun');
// numbers[0] = 'shaun';

let mixed = ['ken', 4, 'chun-li', 8, 9];

mixed.push('ryu');
mixed.push(10);
mixed[0] = 3;

// objects
let ninja = {
  name: 'mario',
  belt: 'black',
  age: 30
};

ninja.age = 40;
ninja.name = 'ryu';
// ninja.age = '30'; //Not allowed
// ninja.skills = ['fighting', 'sneaking'] //Not allowed

ninja = {
  name: 'yoshi',
  belt: 'orange',
  age: 40,
  // skills: ['running'],
};

------------------------Explicit Types and Dynamic (any types)------------------------

let character: string = 'mario';
let age: number;
let isLoggedIn: boolean;

// age = 'luigi';
age = 30;

// isLoggedIn = 25;
isLoggedIn = true;

// arrays
let ninjas: string[] = [];

ninjas.push('ryu');
ninjas.push('chun-li');
console.log(ninjas);

// union types
let mixed: (string|number|boolean)[] = [];
mixed.push('hello');
mixed.push(false);
mixed.push(20);
console.log(mixed);

let uid: string|number;

// objects
let ninjaOne: object; //object may be array or object
ninjaOne = { name: 'yoshi', age: 30 };

let ninjaTwo: {
  name: string,
  age: number,
  beltColour: string
};
ninjaTwo = { name: 'ken', age: 20, beltColour: 'black' };



let age: any = 25;

age = true;
console.log(age);
age = 'hello';
console.log(age);
age = { name: 'luigi' };
console.log(age);

let mixed: any[] = [];

mixed.push(5);
mixed.push('mario');
mixed.push(false);
console.log(mixed);    

let ninja: { name: any, age: any };

ninja = { name: 'yoshi', age: 25 };
console.log(ninja);

ninja = { name: 25, age: 'yoshi' };
console.log(ninja);

------------------------Function Basics | Type Aliases | Function Signatures------------------------

let greet: Function;
greet = () => {
  console.log("Hello");
};
greet();


const greet: Function = (a?: string): void => {
  console.log("Hello " + a);
};
greet("Name");


const greet: Function = (a: number): number => {
  console.log("Hello " + a);
  return a * 2;
};
let ans = greet(3);
console.log(ans);


type StringOrNum = number | String;
const greet: Function = (a?: StringOrNum): void => {
  console.log("Hello " + a);
};
greet("name");
greet(1);


// let greet: Function;

// example 1
let greet: (a: string, b: string) => void;

greet = (name: string, greeting: string) => {
  console.log(`${name} says ${greeting}`);
}

// example 2
let calc: (a: number, b: number, c: string) => number;

calc = (numOne: number, numTwo: number, action: string) => {
  if (action === 'add') {
    return numOne + numTwo;
  } else {
    return numOne - numTwo;
  }
}

// example 3
let logDetails: (obj: {name: string, age: number}) => void;

logDetails = (ninja: {name: string, age: number}) => {
  console.log(`${ninja.name} is ${ninja.age} years old`);
}


------------------------The DOM and Type Casting------------------------

const anchor = document.querySelector('a')!;  // ! It shows that it is there
if(anchor) {
  console.log(anchor.href);
}
console.log(anchor.href);

//const form = document.querySelector('form')!;
const form = document.querySelector('.new-item-form') as HTMLFormElement;
console.log(form.children);

// inputs
const type = document.querySelector('#type') as HTMLInputElement;
const tofrom = document.querySelector('#tofrom') as HTMLInputElement;
const details = document.querySelector('#details') as HTMLInputElement;
const amount = document.querySelector('#amount') as HTMLInputElement;

form.addEventListener('submit', (e: Event) => {
  e.preventDefault();

  console.log(
    type.value, 
    tofrom.value, 
    details.value, 
    amount.valueAsNumber
  );
});

------------------------Classes------------------------

// classes
class Invoice {
  client: string;
  details: string;
  amount: number;

  constructor(c: string, d: string, a: number){
    this.client = c;
    this.details = d;
    this.amount = a;
  }

  format() {
    return `${this.client} owes £${this.amount} for ${this.details}`;
  }
}

const invOne = new Invoice('mario', 'work on the mario website', 250);
const invTwo = new Invoice('luigi', 'work on the luigi website', 300);

let invoices: Invoice[] = [];
invoices.push(invOne)
invoices.push(invTwo);
// invoices.push({ name: 'shaun' });

console.log(invoices);

------------------------public private readonly------------------------

// classes
class Invoice {
  constructor(
    readonly client: string, 
    private details: string, 
    public amount: number,
  ){}

  format() {
    return `${this.client} owes £${this.amount} for ${this.details}`;
  }
}

------------------------Modules------------------------

Only Modern Browsers support
Compile separately so need extra requests

In classses folder

export class Invoice {

  constructor(
    readonly client: string, 
    private details: string, 
    public amount: number,
  ){}

  format() {
    return `${this.client} owes £${this.amount} for ${this.details}`;
  }
}

in src directly

import { Invoice } from './classes/Invoice.js';

------------------------interfaces------------------------

//app.ts

import { Invoice } from './classes/Invoice.js';

// interfaces
export interface IsPerson {
  name: string;
  age?: number;
  speak(a: string): void;
  spend(a: number): number;
}

const me: IsPerson = {
  name: 'shaun',
  //age: 30,
  speak(text: string): void {
    console.log(text);
  },
  spend(amount: number): number {
    console.log('I spent ', amount);
    return amount;
  },
};

console.log(me);
me.speak('hello, world');

const greetPerson = (person: IsPerson): void => {
  console.log('hello ', person.name);
}

greetPerson(me);
//greetPerson({name: 'shaun'});

------------------------interfaces with classes------------------------

classes -- >Invoice.ts Payment.ts

Invoice.ts
import { HasFormatter } from '../interfaces/HasFormatter.js';

export class Invoice implements HasFormatter {
  constructor(
    readonly client: string, 
    private details: string, 
    public amount: number,
  ){}

  format() {
    return `${this.client} owes £${this.amount} for ${this.details}`;
  }
}

Payment.ts

import { HasFormatter } from '../interfaces/HasFormatter.js';

export class Payment implements HasFormatter{
  constructor(
    readonly recipient: string,
    private details: string,
    public amount: number,
  ){};

  format() {
    return`${this.recipient} is owed £${this.amount} for ${this.details}`;
  }
}

interfaces -- > HasFormatter.ts

export interface HasFormatter {
  format(): string;
}



In script be link app.js not app.ts

------------------------Rendering an HTML Template------------------------

classes -- >Invoice.ts Payment.ts ListTemplate.ts

import { HasFormatter } from "../interfaces/HasFormatter";

export class ListTemplate {
  constructor(private container: HTMLUListElement){}

  render(item: HasFormatter, heading: string, pos: 'start' | 'end'){
    const li = document.createElement('li');
  
    const h4 = document.createElement('h4');
    h4.innerText = heading;
    li.append(h4);

    const p = document.createElement('p');
    p.innerText = item.format();
    li.append(p);

    if(pos === 'start'){
      this.container.prepend(li);
    } else {
      this.container.append(li);
    }
  }
}

interfaces -- > HasFormatter.ts

app.ts

import { Invoice } from './classes/Invoice.js';
import { Payment } from './classes/Payment.js';
import { ListTemplate } from './classes/ListTemplate.js';
import { HasFormatter } from './interfaces/HasFormatter.js';

const form = document.querySelector('.new-item-form') as HTMLFormElement;
console.log(form.children);

// inputs
const type = document.querySelector('#type') as HTMLInputElement;
const tofrom = document.querySelector('#tofrom') as HTMLInputElement;
const details = document.querySelector('#details') as HTMLInputElement;
const amount = document.querySelector('#amount') as HTMLInputElement;

// list template instance
const ul = document.querySelector('ul')!;
const list = new ListTemplate(ul);

form.addEventListener('submit', (e: Event) => {
  e.preventDefault();

//let values: [string, string, number];
//   values = [tofrom.value, details.value, amount.valueAsNumber];

//   let doc: HasFormatter;
//   if (type.value === 'invoice') {
//     doc = new Invoice(...values);
//   } else {
//     doc = new Payment(...values);
//   }

  let doc: HasFormatter;
  if (type.value === 'invoice') {
    doc = new Invoice(tofrom.value, details.value, amount.valueAsNumber);
  } else {
    doc = new Payment(tofrom.value, details.value, amount.valueAsNumber);
  }
  
  list.render(doc, type.value, 'end');
});

------------------------Generics------------------------

const addUID = (obj: object) => {
   let uid = Math.floor(Math.random() * 100);
   return {...obj, uid};
 }

const addUID = <T extends object>(obj: T) => {
   let uid = Math.floor(Math.random() * 100);
   return {...obj, uid};
 }

const addUID = <T extends {name: string}>(obj: T) => {
  let uid = Math.floor(Math.random() * 100);
  return {...obj, uid};
}

let docOne = addUID({name: 'yoshi', age: 40});
//let docTwo = addUID('shaun');

console.log(docOne.name);

// with interfaces
interface Resource<T> {
  uid: number;
  resourceName: string;
  data: T;
}

const docThree: Resource<object> = {
  uid: 1, 
  resourceName: 'person', 
  data: { name: 'shaun' }
};

const docFour: Resource<string[]> = {
  uid: 1, 
  resourceName: 'shoppingList', 
  data: ['bread', 'milk']
};

console.log(docThree, docFour);

------------------------Enums------------------------

// ENUMS

enum ResourceType { BOOK, AUTHOR, FILM, DIRECTOR };

interface Resource<T> {
  uid: number;
  resourceType: ResourceType;
  data: T;
}

const docOne: Resource<object> = {
  uid: 1,
  resourceType: ResourceType.BOOK,
  data: { title: 'name of the wind' }
}
const docTwo: Resource<object> = {
  uid: 10,
  resourceType: ResourceType.DIRECTOR,
  data: { title: 'name of the wind' }
}

console.log(docOne);
console.log(docTwo);

------------------------Tupples------------------------

// TUPLES
let arr = ['ryu', 25, true];
arr[0] = false;
arr[1] = 'yoshi';
arr = [30, false, 'yoshi'];

let tup: [string, number, boolean] = ['ryu', 25, true];
// tup[0] = false;
tup[0] = 'ken';

let student: [string, number];
//student = [23564, 'chun-li'];
student = ['chun-li', 23564];

