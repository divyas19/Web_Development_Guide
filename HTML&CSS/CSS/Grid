Grid -

CSS Grid Concept :- 

Grids are 2-D we can place H and V and Both. Stacking through z-index.
You can have grid 6*6 with only two items.


CONTAINER :- 

display:grid;

_______________________________________

____  ____  ____  ____
____  ____  ____  ____
____  ____  ____  ____

grid-template-rows: 133px 133px 133px;
                  : 133px   1fr   1fr;
                  :   2fr   1fr   1fr;

grid-template-columns: 133px 133px 133px;

grid-template-rows: repeat(3, 1fr);// : 1fr 1fr 1fr
grid-template-columns: repeat(3, 1fr);

grid-template-rows: 100px 100px;
grid-template-columns: 100px 3fr 1fr;

some may shrink a lot 
grid-template-columns: 100px minmax(100px,3fr) 1fr; //stops shrinking at 100px;



grid - 3 rows - 2 columns
grid-template-areas:
   'header header'
   'main aside'
   'footer footer';  

.item-1{
grid-area: header;
}

.item-2{
grid-area: main;
}

.item-3{
grid-area: aside;
}

.item-4{
grid-area: footer;
}

text inside each item at center

 


row-gap:12px;
column-gap:12px;
gap: 12px 13px;
gap: 12px; all



It is item property :-
grid-column-start: 1;  |_|_| | | | 
grid-column-end: 3;
grid-row-start: 1;   
grid-row-end: 3;

____  ____  

grid-column: 2 / span 3;  or span 2 - means whereever you are span 2 columns from that.
grid-column: 2 / 5


start from line 1 and span till 3 columns
| |_|_|_| | | | |



Item property :-
grid-area: row-start col-start row-end col-end;
grid-area: 3 / 1 / -1 / -1; // 3 / 1 / 7 / 7



Stacking :-
.item{
grid-area: 2 / 4 / 4 / 6;
z-index: 1;
 }



Elements falling outside of grid size are in explicitly defind grid and don't follow properties.
To resolve this in container add 
grid-auto-rows: 100px; //If it is added below last row
grid-auto-flow: column;


justify-content - must give width to items - container property 

grid - 6*6
only 2 rows and 2 columns

____ ____ ____ ____ ____ ____    container width : 600px; item width : 200px;

          ____ ____
          |        |           2 r 2 c   


  

justify-items - must give width to items - container property

grid-template-rows: 50px 1fr 50px;
grid-template-columns: repeat(3, 1fr);

__________________________________   start

__________ __________ __________     each grid 
____       ____       ____



__________________________________   end

__________ __________ __________     each grid 
      ____       ____       ____

align-items: center;
center start end.... 

place-items: center;

start end center baseline




justify-self - It is item property.
justify-self: center;

align-self: center;

place-self: center;



grid - container treated as block;
inline-grid - container treated as inline // to set whole layout in a box



Responsive grid

grid-template-rows: repeat(4,100px);
grid-template-columns: repeat(4, minmax(100px,1fr));  at 100px*4 the grid may shrink more but items cover 400px


grid-template-rows: repeat(4,100px);
grid-template-columns: repeat(auto-fit, minmax(100px,1fr));  at 100px*4 the grid may shrink more but items cover 400px
