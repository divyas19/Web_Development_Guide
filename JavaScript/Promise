-----------------------------------------------Promise--------------------------------------------------------------------------------------------

JavaScript Promise are easy to manage when dealing with multiple asynchronous operations where callbacks can create callback hell leading to unmanageable code. Prior to promises events and callback functions were used but they had limited functionalities and created unmanageable code. Multiple callback functions would create callback hell that leads to unmanageable code. Promises are used to handle asynchronous operations in JavaScript.

Syntax:

let promise = new Promise(function(resolve, reject){
     //do something
});
Parameters

The promise constructor takes only one argument which is a callback function
The callback function takes two arguments, resolve and reject
Perform operations inside the callback function and if everything went well then call resolve.
If desired operations do not go well then call reject.
A Promise has four states:


1)fulfilled: Action related to the promise succeeded
2)rejected: Action related to the promise failed
3)pending: Promise is still pending i.e. not fulfilled or rejected yet
4)settled: Promise has been fulfilled or rejected

function watchTutorialCallback(callback, errorCallback) {
  let userLeft = false
  let userWatchingCatMeme = false

  if (userLeft) {
    errorCallback({
      name: 'User Left', 
      message: ':('
    })
  } else if (userWatchingCatMeme) {
    errorCallback({
      name: 'User Watching Cat Meme',
      message: 'WebDevSimplified < Cat' 
    })
  } else {
    callback('Thumbs up and Subscribe')
  }
}

function watchTutorialPromise() {
  let userLeft = false
  let userWatchingCatMeme = false
  return new Promise((resolve, reject) => {
    if (userLeft) {
      reject({
        name: 'User Left', 
        message: ':('
      })
    } else if (userWatchingCatMeme) {
      reject({
        name: 'User Watching Cat Meme',
        message: 'WebDevSimplified < Cat' 
      })
    } else {
      resolve('Thumbs up and Subscribe')
    }
  })
}

watchTutorialCallback(message => {
  console.log(message)
}, error => {
  console.log(error.name + ' ' + error.message)
})

watchTutorialPromise().then(message => {
  console.log(message)
}).catch(error => {
  console.log(error.name + ' ' + error.message)
})

---------------------------------------------------------------------------------------------------------------------------------------
let userLeft = false;
let userWatchingCatMeme = false;

let v = new Promise((resolve, reject) => {
    if (userLeft) {
      reject({
        name: 'User Left', 
        message: ':('
      })
    } else if (userWatchingCatMeme) {
      reject({
        name: 'User Watching Cat Meme',
        message: 'WebDevSimplified < Cat' 
      })
    } else {
      resolve('Thumbs up and Subscribe')
    }
  })
  
v.then(message => {
  console.log(message)
}).catch(error => {
  console.log(error.name + ' ' + error.message)
})

const recordVideoOne = new Promise((resolve, reject) => {
  resolve('Video 1 Recorded')
})

const recordVideoTwo = new Promise((resolve, reject) => {
  resolve('Video 2 Recorded')
})

const recordVideoThree = new Promise((resolve, reject) => {
  resolve('Video 3 Recorded')
})


After all promises are resolved then run this.
Promise.all([
  recordVideoOne,
  recordVideoTwo,
  recordVideoThree
]).then(messages => {
  console.log(messages)
})

After first promise is resolved then run this.
Promise.race([
  recordVideoOne,
  recordVideoTwo,
  recordVideoThree
]).then(message => {
  console.log(message)
})

---------------------------------------------------------------------------------------------------------------------------------------

const val = 0;

let p = new Promise((resolve,reject)=>{
    
    if(val === 1)
    resolve({name:"true",message:"Successful"});
    else
    reject({name:"false",message:"Unsuccessful"});
    
})

p.then(data=>{console.log(data.name+" "+data.message)})
 .catch(data=>{console.log(data.name+" "+data.message)});
 
 let p1 = new Promise((resolve,reject)=>{
     resolve(1);
 });
 
  let p2 = new Promise((resolve,reject)=>{
     resolve(2);
 });
 
  let p3 = new Promise((resolve,reject)=>{
     resolve(3);
 });
 
 Promise.all([p1,p2,p3]).then(data=>console.log(data));
 
  let p4 = new Promise((resolve,reject)=>{
      setTimeout(()=>resolve(4),2000)
 });
 
  let p5 = new Promise((resolve,reject)=>{
     resolve(5);
 });
 
  let p6 = new Promise((resolve,reject)=>{
     resolve(6);
 });
 
 Promise.race([p4,p5,p6]).then(data=>console.log(data));
 
//  O/P
//  false Unsuccessful
// [ 1, 2, 3 ]
// 5
