-----------------------------------------------Object destructuring----------------------------------------------------------------------------------------

Now that is a lot of talk about arrays so letâ€™s now talk about destructuring objects which is the most useful form of destructuring.

Similar to arrays, destructuring an object for specific properties is as easy as wrapping the variables inside of curly brackets to denote we are doing object destructuring. You then just put the object you want to get the values from on the right side of the equals sign.

const person = { name: "Kyle", age: 25 }
const { name, age } = person

console.log(name)
// Kyle
console.log(age)
// 25
As long as you use the same variable name in your destructured variables as is in the object it will work perfectly. Luckily, you can also easily rename variables as well. If you wanted the name variable to be called firstName instead you can do the following.

const person = { name: "Kyle", age: 25 }
const { name: firstName, age } = person

console.log(firstName)
// Kyle
console.log(age)
// 25
This is essentially saying that you are mapping the property name from the object person to a new variable called firstName.

Spread Operator With Objects
Just like with arrays you can spread out the rest of an object while destructuring.

const person = { name: "Kyle", age: 25, favoriteFood: "Rice" }
const { name, ...rest } = person

console.log(name)
// Kyle
console.log(rest)
// { age: 25, favoriteFood: 'Rice' }
As you can see all of the properties that are not destructured are added to a new object. This is really useful for cloning an object without certain properties.

Also, like arrays you can combine together two objects with the spread operator to create a new object. This will also overwrite any values that are in both objects by the one that is defined last.

const person1 = { name: "Kyle", age: 25 }
const person2 = { age: 32, favoriteFood: "Rice" }
const newPerson = { ...person1, ...person2 }

console.log(newPerson)
// { name: 'Kyle', age: 32, favoriteFood: 'Rice' }

Nested Object Destructuring

It is pretty common to have an object nested inside another object and want to get a specific value from it. With destructuring this is incredibly easy.

const person = {
  name: "Kyle",
  age: 25,
  address: {
    city: "Somewhere",
    state: "One Of Them",
  },
}
const {
  name,
  address: { city },
} = person

console.log(name)
// Kyle
console.log(city)
// Somewhere
The way this works is by saying we are mapping the address property to a specific variable, but instead of actually creating a variable to map that element to we are destructuring that element into the variable city. We are essentially combining the below two lines together.

const { name, address: addressVariable } = person
const { city } = addressVariable
We can even nest array destructuring together, but that is not something you will often need to do.

Default Values
It is pretty common to destructure an object without knowing if a property exists or not. Many times when this is the case there is a default value you want to apply in case that value does not exist.

const person = { name: "Kyle", age: 25 }
const { name = "Sally", favoriteFood = "Banana" } = person

console.log(name)
// Kyle
console.log(favoriteFood)
// Banana
As you can see since the favoriteFood property does not exist in the person object it falls back to the default value. The name property does exist, though, so instead of using the default it pulls the actual value from the person object.

When To Use Destructuring/Spread Operator With Objects
Again it may seem like these cases above are contrived and this would never be a useful feature, but in reality I use this feature every day.

Copying An Object
Just like arrays it is very easy to copy an object and create an exact clone with destructuring.

const person = { name: "Kyle", age: 25 }
const personClone = { ...person }
personClone.name = "Sally"

console.log(person)
// { name: 'Kyle', age: 25 }
console.log(personClone)
// { name: 'Sally', age: 25 }
Destructuring Function Returns
Again just like arrays I use this all the time to return multiple values from a function.

function sumAndMultiply(a, b) {
  return { sum: a + b, product: a * b }
}

const { sum, product } = sumAndMultiply(2, 3)

console.log(sum)
// 5
console.log(product)
// 6
Destructuring Function Parameters
In JavaScript it is very common to pass an object to a function so having the ability to destructure the object in the function definition and define defaults is incredibly useful.

function printPerson({ name, age, favoriteFood = "None" }) {
  console.log(`Name: ${name}. Age: ${age}. Food: ${favoriteFood}.`)
}

const person = { name: "Kyle", age: 25 }

printPerson(person)
// Name: Kyle. Age: 25. Food: None.
