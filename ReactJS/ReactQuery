-------------------React Query----------------------------

A library for fetching data in React Application.

To use React Query properly, you need to wrap your entire application with a QueryClientProvider, and you need to create and provide a QueryClient instance. Here's how you can set it up:

First, install React Query if you haven't already and other required parts:
npm install react-query
npm install @react-query/devtools
Then, in your App.js, you would set up your QueryClient and wrap your component hierarchy with QueryClientProvider:

App.js
import React from 'react';
import { QueryClient, QueryClientProvider } from 'react-query';
import { ReactQueryDevtools } from '@react-query/devtools';
import MyComponent from './MyComponent';

// Create a new QueryClient instance
const queryClient = new QueryClient();

const App = () => {
  return (
    // Provide the QueryClient to your app
    <QueryClientProvider client={queryClient}>
      <div className="App">
        <h1>ReactQuery Example</h1>
        <MyComponent />
      </div>
    <ReactQueryDevtools initialIsOpen={false} />
    </QueryClientProvider>
  );
};

export default App;

Now, you can use useQuery hooks within your components, and React Query will manage the fetching and caching of data for you. Remember that QueryClientProvider should wrap around your entire application to provide access to the QueryClient instance.

import React from 'react';
import { useQuery } from 'react-query';
import axios from 'axios'

const fetchData = async () => {
 return axios.get('http://localhost:4000/superheroes')
};
const MyComponent = () => {

const onSuccess = (data) => {
  console.log('Perform side effect after data fetching',data)
}

const onSuccess = (error) => {
  console.log('Perform side effect after encountering error',error)
}

const { data, isLoading, isError, error, isFetching, refetch } = useQuery('data', fetchData,
{
//cacheTime:5000,
//staleTime:30000,
//enabled:false,
onSuccess,
onError,
select: (data) => {
  const superHeroNames = data.data.map((hero)=> hero.name)
  return superHeroNames
},
);

  if (isLoading || isFetching) return <div>Loading...</div>;
  if (isError) return <div>Error: {error.message}</div>;

  return (
    <div>
      {/* Render your data */}
      <button onClick={refetch}>Fetch Data</button>
      {/* {data?.data.map((elem) => {
        return <div key={elem.name}>{elem.name}</div>
      })} */}
      {data.map((heroName)=> {
        return <div key={heroName}>{heroName}</div>
       })}
    </div>
  );
};

export default MyComponent;


In React Query, the staleTime option determines how long the data fetched by a query remains considered "fresh" in the cache. If a component requests the data while it's within this "stale" period, React Query will return the cached data immediately without making a new request to the server. However, if the data is requested after the staleTime period has passed, React Query will automatically trigger a background refetch of the data before returning it to the component.

In React Query, the staleTime option is used to determine how long the data fetched by a query remains considered "fresh" in the cache.

When a component requests the data, React Query checks if the cached data is stale based on the staleTime. If the cached data is still considered fresh (i.e., the time since it was fetched is less than staleTime), React Query returns the cached data immediately without making a new request to the server. This enhances performance by reducing unnecessary network requests and providing a more responsive user experience.

However, if the cached data is considered stale (i.e., the time since it was fetched exceeds staleTime), React Query will still return the cached data immediately to the component. Additionally, it will trigger a background fetch request to update the cached data. This ensures that the data remains up-to-date while still providing a responsive user experience.
However, if you're referring to a hypothetical cacheTime option in the context of React Query, it could potentially represent the duration for which the data remains in the cache before being considered stale.


Other options:-

const { data } = useQuery('key', fetchData, {
  refetchOnMount: false, // Disable automatic refetch on mount
});

const { data } = useQuery('key', fetchData, {
  refetchOnWindowFocus: false, // Disable automatic refetch on window focus
});

const { data } = useQuery('key', fetchData, {
  refetchInterval: 5000, // Refetch every 5 seconds (5000 milliseconds)
});

//Data poll
const { data } = useQuery('key', fetchData, {
  refetchIntervalInBackground: 10000, // Refetch every 10 seconds (10000 milliseconds) in background
});

//Data transformation using fetch
select

__________________________________________________________________________________________________________________________

Custom Query

useSuperHeroesData.js
import { useQuery } from 'react-query';
import axios from 'axios'

const fetchData = async () => {
 return axios.get('http://localhost:4000/superheroes')
};

export const useSuperHeroesData = (onSuccess, onError) => {
 return useQuery('data', fetchData,
{
//cacheTime:5000,
//staleTime:30000,
//enabled:false,
onSuccess,
onError,
select: (data) => {
  const superHeroNames = data.data.map((hero)=> hero.name)
  return superHeroNames
},
);
}


MyComponent.js
import React from 'react';
import { useSuperHeroesData } from '../hooks/useSuperHeroesData'

const MyComponent = () => {

const onSuccess = (data) => {
  console.log('Perform side effect after data fetching',data)
}

const onSuccess = (error) => {
  console.log('Perform side effect after encountering error',error)
}

const { data, isLoading, isError, error, isFetching, refetch } = useSuperHeroesData(onSuccess,onError);

  if (isLoading || isFetching) return <div>Loading...</div>;
  if (isError) return <div>Error: {error.message}</div>;

  return (
    <div>
      {/* Render your data */}
      <button onClick={refetch}>Fetch Data</button>
      {/* {data?.data.map((elem) => {
        return <div key={elem.name}>{elem.name}</div>
      })} */}
      {data.map((heroName)=> {
        return <div key={heroName}>{heroName}</div>
       })}
    </div>
  );
};

export default MyComponent;

__________________________________________________________________________________________________________________________

Query By ID

// App.js
import React from 'react';
import { QueryClient, QueryClientProvider } from 'react-query';
import MyComponent from './MyComponent';

const queryClient = new QueryClient();

const App = () => {
  return (
    <QueryClientProvider client={queryClient}>
      <div className="App">
        <h1>ReactQuery Example</h1>
        {/* Pass the desired ID to MyComponent */}
        <MyComponent id={123} />
      </div>
    </QueryClientProvider>
  );
};

export default App;


// MyComponent.js
import React from 'react';
import { useQuery } from 'react-query';

const fetchDataById = async (id) => {
  const response = await fetch(`https://api.example.com/data/${id}`);
  if (!response.ok) {
    throw new Error('Failed to fetch data');
  }
  return response.json();
};

{/*
const fetchDataById = async ({queryKey) => {
  const id = queryKey[1];
  const response = await fetch(`https://api.example.com/data/${id}`);
  if (!response.ok) {
    throw new Error('Failed to fetch data');
  }
  return response.json();
};
*/}

const MyComponent = ({ id }) => {
  const { data, isLoading, isError, error } = useQuery(['data', id], () => fetchDataById(id));
  {/*const { data, isLoading, isError, error } = useQuery(['data', id],fetchDataById);*/

  if (isLoading) return <div>Loading...</div>;
  if (isError) return <div>Error: {error.message}</div>;

  return (
    <div>
      {/* Render your data */}
      <pre>{JSON.stringify(data, null, 2)}</pre>
    </div>
  );
};

export default MyComponent;

__________________________________________________________________________________________________________________________

Parallel Queries

import React from 'react';
import axios from 'axios';
import { useQuery } from 'react-query';

const fetchUserData = async () => {
  const response = await axios.get('https://api.example.com/user');
  return response.data;
};

const fetchPostsData = async () => {
  const response = await axios.get('https://api.example.com/posts');
  return response.data;
};

const UserProfile = () => {
  const { data: userData, isLoading: isUserLoading, isError: isUserError, error: userError } = useQuery('userData', fetchUserData);

  const { data: postsData, isLoading: isPostsLoading, isError: isPostsError, error: postsError } = useQuery('postsData', fetchPostsData);

  if (isUserLoading || isPostsLoading) return <div>Loading...</div>;
  if (isUserError) return <div>Error loading user data: {userError.message}</div>;
  if (isPostsError) return <div>Error loading posts data: {postsError.message}</div>;

  return (
    <div>
      <h1>User Profile</h1>
      <h2>User Data</h2>
      <pre>{JSON.stringify(userData, null, 2)}</pre>
      <h2>Posts Data</h2>
      <pre>{JSON.stringify(postsData, null, 2)}</pre>
    </div>
  );
};

export default UserProfile;

__________________________________________________________________________________________________________________________

Dynamic Parallel Queries

import React from 'react';
import { QueryClient, QueryClientProvider } from 'react-query';
import UserProfile from './UserProfile';

const queryClient = new QueryClient();

const App = () => {
  // Array of user IDs
  const userIds = [1, 3];

  return (
    <QueryClientProvider client={queryClient}>
      <div className="App">
        {/* Pass the array of user IDs to UserProfile */}
        <UserProfile userIds={userIds} />
      </div>
    </QueryClientProvider>
  );
};

export default App;

import React from 'react';
import axios from 'axios';
import { useQueries } from 'react-query';

const fetchUserData = async (id) => {
  const response = await axios.get(`https://api.example.com/user/${id}`);
  return response.data;
};

const fetchPostData = async (userId) => {
  const response = await axios.get(`https://api.example.com/posts?userId=${userId}`);
  return response.data;
};

const UserProfile = ({ userIds }) => {
  // Array of query objects
  const queries = userIds.map(userId => {
    return {
      queryKey: ['userData', userId],
      queryFn: () => fetchUserData(userId)
    };
  });

  // Execute all queries in parallel
  const results = useQueries(queries);

  return (
    <div>
      <h1>User Profiles</h1>
      {results.map((result, index) => {
        if (result.isLoading) return <div key={index}>Loading...</div>;
        if (result.isError) return <div key={index}>Error: {result.error.message}</div>;
        return (
          <div key={index}>
            <h2>User Data for userId {userIds[index]}</h2>
            <pre>{JSON.stringify(result.data, null, 2)}</pre>
          </div>
        );
      })}
    </div>
  );
};

export default UserProfile;

__________________________________________________________________________________________________________________________

Dependent Queries
//Double negation !! converts the value to boolean

import React from 'react';
import axios from 'axios';
import { useQuery } from 'react-query';

const fetchUserData = async (id) => {
  const response = await axios.get(`https://api.example.com/user/${id}`);
  return response.data;
};

const fetchPostData = async (userId) => {
  const response = await axios.get(`https://api.example.com/posts?userId=${userId}`);
  return response.data;
};

const UserProfile = ({ userId }) => {
  // Query to fetch user data
  const { data: userData, isLoading: isUserLoading, isError: isUserError, error: userError } = useQuery(['userData', userId], () => fetchUserData(userId));

  // Dependent query to fetch posts data based on user data
  const { data: postData, isLoading: isPostLoading, isError: isPostError, error: postError } = useQuery(['postData', userId], () => fetchPostData(userId), {
    enabled: !!userData, // Enable the query only if userData is available
  });

  if (isUserLoading || isPostLoading) return <div>Loading...</div>;
  if (isUserError) return <div>Error loading user data: {userError.message}</div>;
  if (isPostError) return <div>Error loading posts data: {postError.message}</div>;

  return (
    <div>
      <h1>User Profile</h1>
      <h2>User Data</h2>
      <pre>{JSON.stringify(userData, null, 2)}</pre>
      <h2>Posts Data</h2>
      <pre>{JSON.stringify(postData, null, 2)}</pre>
    </div>
  );
};

export default UserProfile;

__________________________________________________________________________________________________________________________

Initial Query Data

import axios from 'axios';
import { useQuery, useQueryClient } from 'react-query';

const fetchSuperHero = async ({ queryKey }) => {
  const heroId = queryKey[1];
  const response = await axios.get(`http://localhost:4000/superheroes/${heroId}`);
  return response.data;
};

export const useSuperHeroData = (heroId) => {
  const queryClient = useQueryClient();

  return useQuery(['super-hero', heroId], fetchSuperHero, {
    initialData: async () => {
      try {
        const heroes = queryClient.getQueryData('super-heroes');
        const hero = heroes?.find((hero) => hero.id === parseInt(heroId));
        if (hero) {
          return {
            data: hero
          };
        } else {
          return undefined;
        }
      } catch (error) {
        console.error('Error fetching initial data:', error);
        return undefined;
      }
    }
  });
};


useSuperHeroData Hook:
This custom hook takes a heroId as its parameter.
It initializes the queryClient using useQueryClient, which provides access to the query client instance.
The hook uses the useQuery hook to fetch superhero data.
The first argument to useQuery is an array containing the query key (in this case, ['super-hero', heroId]) and the heroId. This key is used internally by React Query to identify and manage the query.
The second argument is the fetchSuperHero function responsible for fetching data.
It also accepts an options object as the third argument, which includes an initialData property.

initialData Function:
This is an asynchronous function provided as the value for the initialData option.
It tries to fetch data from the query client's cache using queryClient.getQueryData('super-heroes').
If the data is found, it searches for the specific hero matching the heroId provided. If found, it returns an object with the hero data.
If the hero is not found, it returns undefined.
Any errors that occur during this process are caught and logged to the console, and the function returns undefined.

__________________________________________________________________________________________________________________________

Paginated Queries

import React from 'react';
import { QueryClient, QueryClientProvider } from 'react-query';
import CharactersList from './CharactersList';

const queryClient = new QueryClient();

const App = () => {
  return (
    <QueryClientProvider client={queryClient}>
      <div className="App">
        <h1>Character List</h1>
        <CharactersList />
      </div>
    </QueryClientProvider>
  );
};

export default App;


import React, { useState } from 'react';
import { useQuery } from 'react-query';
import axios from 'axios';

const fetchCharacters = async (page, limit) => {
  const response = await axios.get(`https://api.example.com/characters?page=${page}&limit=${limit}`);
  return response.data;
};

const CharactersList = () => {
  const [currentPage, setCurrentPage] = useState(1);
  const limit = 10; // Set the limit per page

  const { data, isLoading, isError } = useQuery(['characters', currentPage], () => fetchCharacters(currentPage, limit));

  const handlePreviousPage = () => {
    setCurrentPage(prevPage => prevPage - 1);
  };

  const handleNextPage = () => {
    setCurrentPage(prevPage => prevPage + 1);
  };

  if (isLoading) return <div>Loading...</div>;
  if (isError) return <div>Error fetching data</div>;

  return (
    <div>
      <h1>Characters</h1>
      <button onClick={handlePreviousPage} disabled={currentPage === 1}>Previous</button>
      <button onClick={handleNextPage}>Next</button>
      <ul>
        {data.map(character => (
          <li key={character.id}>{character.name}</li>
        ))}
      </ul>
    </div>
  );
};

export default CharactersList;


The array ['characters', currentPage] serves as the query key in React Query. The query key is a unique identifier for each query and is used by React Query to manage caching, refetching, and updating of data.

In the case of pagination, it's common to include dynamic variables in the query key to differentiate between different pages of data. Here's why we use ['characters', currentPage]:

'characters': This is the base identifier for the query. It represents the type or category of data we are fetching, in this case, characters. It helps React Query group similar queries together.
currentPage: This is a dynamic variable representing the current page of data being fetched. By including it in the query key, React Query treats each page of data as a separate query. When the currentPage changes, React Query knows to refetch the data for the new page.
Combining these two elements into an array creates a unique query key for each page of data. For example, ['characters', 1] represents the query for the first page of characters, ['characters', 2] represents the query for the second page, and so on. This allows React Query to manage pagination effectively and handle data caching and updates correctly.

__________________________________________________________________________________________________________________________

Infinite Queries

import React from 'react';
import { useInfiniteQuery } from 'react-query';
import axios from 'axios';

const fetchPosts = async (page = 0) => {
  const response = await axios.get(`https://api.example.com/posts?page=${page}`);
  return response.data;
};

const PostsList = () => {
  const { data, fetchNextPage, hasNextPage, isFetchingNextPage } = useInfiniteQuery(
    'posts',
    ({ pageParam = 0 }) => fetchPosts(pageParam),
    {
      getNextPageParam: (lastPage, allPages) => {
        // Return the next page number or null to indicate no more pages
        return lastPage.length === 10 ? allPages.length : null;
      },
    }
  );

  return (
    <div>
      <h1>Posts</h1>
      {data.pages.map((page, pageIndex) => (
        <React.Fragment key={pageIndex}>
          {page.map(post => (
            <div key={post.id}>{post.title}</div>
          ))}
        </React.Fragment>
      ))}
      <button
        onClick={() => fetchNextPage()}
        disabled={!hasNextPage || isFetchingNextPage}
      >
        {isFetchingNextPage ? 'Loading...' : hasNextPage ? 'Load More' : 'No more posts'}
      </button>
    </div>
  );
};

export default PostsList;



Fetching Posts Function (fetchPosts):
This function is responsible for fetching posts data from the API. It accepts a page parameter, which represents the page number of posts to fetch. By default, it fetches the first page (page 0) if no page number is provided.
It uses Axios to make a GET request to the API endpoint, which includes the page number in the query parameters.
It returns the response data obtained from the API.

PostsList Component:
This functional component is the main component responsible for rendering the list of posts and handling pagination.
It uses the useInfiniteQuery hook from React Query to perform infinite queries for fetching posts.
Inside the hook:
'posts' is used as the query key to identify this specific query.
The second argument is a function that defines how to fetch data for each page. It receives an object containing a pageParam property, which represents the page number to fetch. The fetchPosts function is called with this pageParam.
The third argument is an options object. In this example, we define a getNextPageParam function, which determines the next page number based on the last page's data. If the last page contains the maximum number of posts (e.g., 10 posts), it returns the next page number. Otherwise, it returns null to indicate that there are no more pages.

Rendering Posts and Pagination:
Inside the component's JSX:
We render the list of posts by mapping over the data.pages array. Each element of data.pages represents a page of posts, and we map over each page to render individual posts.
The "Load More" button is rendered with an onClick handler that calls the fetchNextPage function when clicked. This function fetches the next page of posts.
The button is disabled when there are no more pages (!hasNextPage) or when the next page is being fetched (isFetchingNextPage).
The text of the button changes based on whether the next page is being fetched ('Loading...'), whether there are more pages to load ('Load More'), or whether all posts have been fetched ('No more posts').

Overall, this implementation allows for efficient pagination of posts, with React Query handling the caching, refetching, and pagination logic.

__________________________________________________________________________________________________________________________
