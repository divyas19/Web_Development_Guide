-----------------------------------------------memo useMemo useCallback--------------------------------------------------------------------------------------------

useMemo and useCallback are both hooks provided by React, but they serve different purposes:

---------------useMemo:------------------

useMemo is used for memoizing the result of a function. It takes a function and an array of dependencies. It will only recompute the memoized value when one of the dependencies has changed. This helps in optimizing performance by avoiding unnecessary computations.
It is typically used when you have a costly computation that doesn't need to be re-executed on every render if its dependencies haven't changed.
Example: Memoizing the result of a complex computation, such as sorting or filtering an array, to avoid recomputing it on every render.

import React, { useState, useMemo } from 'react';

export default function App() {
  const [number, setNumber] = useState(8);
  const [dark, setDark] = useState(false);

  const doubleNumber = useMemo(() => {
    return slowFunction(number);
  }, [number]);

  const themeStyles = {
    backgroundColor: dark ? 'black' : 'white',
    color: dark ? 'white' : 'black'
  };

  return (
    <>
      <input
        type="number"
        value={number}
        onChange={(e) => setNumber(parseInt(e.target.value))}
      />
      <button onClick={() => setDark(prevDark => !prevDark)}>
        Change Theme
      </button>
      <div style={themeStyles}>{doubleNumber}</div>
    </>
  );
}

function slowFunction(num) {
  console.log('Calling Slow Function');
  for (let i = 0; i <= 1000000000; i++) {}
  return num * 2;
}

---------------useCallback:------------------


useCallback is used to memoize a callback function. It returns a memoized version of the callback that only changes if one of the dependencies has changed.
It is useful when passing callbacks to child components that rely on reference equality to prevent unnecessary re-renders.
Example: Passing callbacks to child components or event handlers in event listeners where you want to ensure that the callback doesn't change unnecessarily.
In summary, both useMemo and useCallback are used for optimization purposes in React applications. useMemo is for memoizing the result of a computation, while useCallback is for memoizing a callback function. They help in avoiding unnecessary recalculations and re-renders, thereby improving performance.

import React, { useState, useCallback } from 'react';
import List from './List.js';

export default function App() {
  const [number, setNumber] = useState(1);
  const [dark, setDark] = useState(false);

  const getItems = useCallback(() => {
    return [number, number + 1, number + 2];
  }, [number]);

  const theme = {
    backgroundColor: dark ? '#333' : '#FFF',
    color: dark ? '#FFF' : '#333'
  };

  return (
    <div style={theme}>
      <input
        type="number"
        value={number}
        onChange={e => setNumber(parseInt(e.target.value))}
      />
      <button onClick={() => setDark(prevDark => !prevDark)}>
        Toggle theme
      </button>
      <List getItems={getItems} />
    </div>
  );
}

import React, { useEffect, useState } from 'react';

export default function List({ getItems }) {
  const [items, setItems] = useState([]);

  useEffect(() => {
    setItems(getItems());
    console.log("Updating Items");
  }, [getItems]);

  return items.map((item, index) => <div key={index}>{item}</div>);
}

---------------React.memo:------------------

In React, when a parent component renders, a child component might un-necessarily render. To optimize this behaviour, you can use React.memo and pass in the child component.
React.memo will perform a shallow comparison of the previous and new props and re-render the child component only if the props have changed.

import React from 'react';
import './App.css';
import { ParentTwo } from './components/Optimization/ParentTwo';

function App() {
  return (
    <div className='App'>
      <ParentTwo />
    </div>
  );
}

export default App;


import React from 'react';

export const ChildTwo = () => {
  console.log('ChildTwo Render');
  return <div>ChildTwo component</div>;
};

export const MemoizedChildTwo = React.memo(ChildTwo);


import React, { useState } from 'react';
import { MemoizedChildTwo } from './ChildTwo';

export const ParentTwo = () => {
  const [count, setCount] = useState(0);
  const [name, setName] = useState('Vishwas');

  console.log('ParentTwo Render');

  return (
    <div>
      <button onClick={() => setCount(c => c + 1)}>Count {count}</button>
      <button onClick={() => setName('Codevolution')}>Change name</button>
      <MemoizedChildTwo name={name} />
    </div>
  );
};



-------------------------Example in use----------------------------

React.memo is a function that takes a Component and prevents its rerendering


useCallback - Want to rerender a function only when certain value changes in function, not when the state used in function changes.

useMemo() memorizes the function and deals with the value.


import React, { useState, useCallback, useMemo } from 'react'
import { useFetch } from '../../9-custom-hooks/final/2-useFetch'

const url = 'https://course-api.com/javascript-store-products'

// every time props or state changes, component re-renders
const calculateMostExpensive = (data) => {
  return (
    data.reduce((total, item) => {
      const price = item.fields.price
      if (price >= total) {
        total = price
      }
      return total
    }, 0) / 100
  )
}
const Index = () => {
  const { products } = useFetch(url)
  const [count, setCount] = useState(0)
  const [cart, setCart] = useState(0)

  const addToCart = useCallback(() => {
    setCart(cart + 1)
  }, [cart])

  const mostExpensive = useMemo(() => calculateMostExpensive(products), [
    products,
  ])
  return (
    <>
      <h1>Count : {count}</h1>
      <button className='btn' onClick={() => setCount(count + 1)}>
        click me
      </button>
      <h1 style={{ marginTop: '3rem' }}>cart : {cart}</h1>
      <h1>Most Expensive : ${mostExpensive}</h1>
      <BigList products={products} addToCart={addToCart} />
    </>
  )
}

const BigList = React.memo(({ products, addToCart }) => {
  // useEffect(() => {
  //   console.count('hello from big list');
  // });

  return (
    <section className='products'>
      {products.map((product) => {
        return (
          <SingleProduct
            key={product.id}
            {...product}
            addToCart={addToCart}
          ></SingleProduct>
        )
      })}
    </section>
  )
})

const SingleProduct = ({ fields, addToCart }) => {
  let { name, price } = fields
  price = price / 100
  const image = fields.image[0].url

  // useEffect(() => {
  //   console.count('hello from product');
  // });
  return (
    <article className='product'>
      <img src={image} alt={name} />
      <h4>{name}</h4>
      <p>${price}</p>
      <button onClick={addToCart}>add to cart</button>
    </article>
  )
}
export default Index



