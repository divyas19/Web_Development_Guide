React JS

-----------------------------------------------Commands--------------------------------------------------------------------------------------------

1)Initially creating an app
npx create-react-app appname
npm start

2)After clone from git
npm start
npm install

3)Move to production
npm run build

node --version
Babel is a Javascript Compiler that converts newest Javascript into good old Javascript

index.js
<div id="root"></div> Whole our Javascript lives here.

rafce   rfc

npm start -> Starts the development server
npm run build -> Bundles the app into satatic files for production -> This gives Build Folder to deploy

Keep React Component name in Caps

-----------------------------------------------JSX Rules--------------------------------------------------------------------------------------------

JSX rules
return single element and must return something
div section article or Fragment <> </> 
camelCase for html attribute className instead of class  htmlFor instead of for
For JS {}

-----------------------------------------------Structure--------------------------------------------------------------------------------------------


import React from 'react';
import ReactDom from 'react-dom';

function Greeting()
{
return(
<div>
<Person/>
<Message/>
</div>
);
}

const Person = () => <h2>Dia</h2>;
const Message = () =>{
return <p> This is my message</p>;
};

ReactDom.render(<Greeting/>, document.getElementById('root));

-----------------------------------------------Points--------------------------------------------------------------------------------------------

<h1 style={{backgroundColor: "lightblue"}}>Hello Style!</h1>

class MyHeader extends React.Component {
  render() {
    const mystyle = {
      color: "white",
      backgroundColor: "DodgerBlue",
      padding: "10px",
      fontFamily: "Arial"
    };
    return (
      <div>
      <h1 style={mystyle}>Hello Style!</h1>
      <p>Add a little style!</p>
      </div>
    );
  }
}

const Title = 'I am the heading'
<h1>{Title}</h1>
<h1>{Title.toUpperCase()}</h1>
<h1>{6+6}</h1>

Remember In return you have JSX
So write javascript in {}
Also statement should return something  ex - {let a = 6;} not valid 
                                        ex - {console.log("Hello")} valid

-----------------------------------------------Props--------------------------------------------------------------------------------------------

You can pass props as bunny also.

props are objects.


const Book = ({img, title, author}) =>      Destructuring in js
{
//const {img, title, author} = props;
return (
<article className='book'>
<img src={img} alt='' />
<h1>{title}</h1>
<h4>{author}</h4>
</article>
}
);
};

<Book title="My Diary" price={22}/>


<Book title="My Diary" /> If we don't pass any value, the price will not be displayed.


const firstBook = {
images: "...",
title: "Happy World"
}

<img src={props.images} alt='' />    //Instead of props you can use values, datas

No need to maintain props pass order and use order.

const objArr = [{},{},]
const strArr = ["",""]

return <section className="booklist">{objArr}</section>;   invalid
return <section className="booklist">{strArr}</section>;   valid 


-----------------------------------------------Children--------------------------------------------------------------------------------------------


If in some components we want to have something extra we can make use of children

<Book
img={}
title={}
author={}
>
<p> This Child will be displayed for this Book only </p>
</Book>
<Book
img={}
title={}
author={}
/>




const Book = ({img, title, author, children}) =>
{
//const {img, title, author} = props;
return (
<article className='book'>
<img src={img} alt='' />
<h1>{title}</h1>
<h4>{author}</h4>
{children}
</article>
}
);
};


-----------------------------------------------Export--------------------------------------------------------------------------------------------


when we use export default , then while importing we can change the name.

But if we use only export then names must match.


-----------------------------------------------Using Maps--------------------------------------------------------------------------------------------

const books = [
{ id:1,
img:'',
title:'',
author:'',
},
{ id:2,
img:'',
title:'',
author:'',
},
{ id:3,
img:'',
title:'',
author:'',
},
]

function BookList()
{
return(
<section className ='booklist'>
{
books.map((book,index) => {                               props is an object, but here you are passing book object in props object
return <Book key={index} book={book}></Book>;
})}
);
}

const Book = (props) =>
{
const {img, title, author} = props.book;
return (
<article className='book'>
<img src={img} alt='' />
<h1>{title}</h1>
<h4>{author}</h4>
</article>
}
);
};






const books = [
{ id:1,
img:'',
title:'',
author:'',
},
{ id:2,
img:'',
title:'',
author:'',
},
{ id:3,
img:'',
title:'',
author:'',
},
]

function BookList()
{
return(
<section className ='booklist'>
{
books.map((book,index) => {

//return <Book key={book.id} {...book}></Book>;            Using destructure in js   
})}
);
}

const Book = (props) =>
{
const {img, title, author} = props;
return (
<article className='book'>
<img src={img} alt='' />
<h1>{title}</h1>
<h4>{author}</h4>
</article>
}
);
};



-----------------------------------------------Hooks--------------------------------------------------------------------------------------------

Hooks are functions that let you “hook into” React state and lifecycle features from function components. Hooks don't work inside classes — they let you use React without classes.
Hooks allow function components to have access to state and other React features. Because of this, class components are generally no longer needed. Although Hooks generally replace class components, there are no plans to remove classes from React.



-----------------------------------------------useState--------------------------------------------------------------------------------------------

useState is a function which returns array. First val is undefined and second is a function.            


useState Array :-

import React from 'react';
import { data } from '../../../data';
const UseStateArray = () => {
  const [people, setPeople] = React.useState(data);

  const removeItem = (id) => {
    let newPeople = people.filter((person) => person.id !== id);
    setPeople(newPeople);
  };
  return (
    <>
      {people.map((person) => {
        const { id, name } = person;
        return (
          <div key={id} className='item'>
            <h4>{name}</h4>
            <button onClick={() => removeItem(id)}>remove</button>
          </div>
        );
      })}
      <button className='btn' onClick={() => setPeople([])}>
        clear items
      </button>
    </>
  );
};

export default UseStateArray;


useState Object :-

import React, { useState } from 'react';

const UseStateObject = () => {
  const [person, setPerson] = useState({
    name: 'peter',
    age: 24,
    message: 'random message',
  });

  // const [name,setName] = useState('peter')
  // const [age,setAge] = useState(24)
  // const [message,setMessage] = useState('random message')

  const changeMessage = () => {
    setPerson({ ...person, message: 'hello world' });
    // setMessage('hello world')
  };

  return (
    <>
      <h3>{person.name}</h3>
      <h3>{person.age}</h3>
      <h4>{person.message}</h4>
      <button className='btn' onClick={changeMessage}>
        change message
      </button>
    </>
  );
};

export default UseStateObject;



useState Counter :-

import React, { useState } from 'react';

const UseStateCounter = () => {
  const [value, setValue] = useState(0);

  const reset = () => {
    setValue(0);
  };

  const complexIncrease = () => {
    setTimeout(() => {
      // setValue(value + 1);
      setValue((prevState) => {
        return prevState + 1;
      });
    }, 2000);
  };

  return (
    <>
      <section style={{ margin: '4rem 0' }}>
        <h2>regular counter</h2>
        <h1>{value}</h1>
        <button className='btn' onClick={() => setValue(value - 1)}>
          decrease
        </button>
        <button className='btn' onClick={reset}>
          reset
        </button>
        <button className='btn' onClick={() => setValue(value + 1)}>
          increase
        </button>
      </section>
      <section style={{ margin: '4rem 0' }}>
        <h2>more complex counter</h2>
        <h1>{value}</h1>
        <button className='btn' onClick={complexIncrease}>
          increase later
        </button>
      </section>
    </>
  );
};

export default UseStateCounter;





<div className={`btn-warning ${props.mode}`}></div>

If you want to create a function in setState, you can do it.

const [people, setPeople] = useState(data);

const removeItem = (id) =>
{
setPeople((oldPeople) => {                                                         oldPeople is the previous state
let newPeople = oldPeople.filter((person) => person.id !== id);
return newPeople;                                                                  return is important to set the new state
});
};



-----------------------------------------------useEffect--------------------------------------------------------------------------------------------


useEffect - Any work outside the componenet - fetch , document title, etc.
            To do something after a state change


useEffect :-

import React, { useState, useEffect } from 'react';

// cleanup function
// second argument

const UseEffectCleanup = () => {
  const [size, setSize] = useState(window.innerWidth);

  const checkSize = () => {
    setSize(window.innerWidth);
  };

  useEffect(() => {
    console.log('useEffect');
    window.addEventListener('resize', checkSize);
    return () => {
      console.log('cleanup');
      window.removeEventListener('resize', checkSize);
    };
  }, []);
  console.log('render');
  return (
    <>
      <h1>window</h1>
      <h2>{size} PX</h2>
    </>
  );
};

export default UseEffectCleanup;


useEffect fetch :-

import React, { useState, useEffect } from 'react';

const url = 'https://api.github.com/users';

// second argument

const UseEffectFetchData = () => {
  const [users, setUsers] = useState([]);

  const getUsers = async () => {
    const response = await fetch(url);
    const users = await response.json();
    setUsers(users);
    // console.log(users);
  };

  useEffect(() => {
    getUsers();
  }, []);
  return (
    <>
      <h3>github users</h3>
      <ul className='users'>
        {users.map((user) => {
          const { id, login, avatar_url, html_url } = user;
          return (
            <li key={id}>
              <img src={avatar_url} alt={login} />
              <div>
                <h4>{login}</h4>
                <a href={html_url}>profile</a>
              </div>
            </li>
          );
        })}
      </ul>
    </>
  );
};

export default UseEffectFetchData;


-----------------------------------------------Conditional Rendering--------------------------------------------------------------------------------------------

Multiple Returns :-

import React, { useState, useEffect } from 'react';
const url = 'https://api.github.com/users/QuincyLarson';
const MultipleReturns = () => {
  const [isLoading, setIsLoading] = useState(true);
  const [isError, setIsError] = useState(false);
  const [user, setUser] = useState('default user');

  useEffect(() => {
    fetch(url)
      .then((resp) => {
        if (resp.status >= 200 && resp.status <= 299) {
          return resp.json();
        } else {
          setIsLoading(false);
          setIsError(true);
          throw new Error(resp.statusText);
        }
      })
      .then((user) => {
        const { login } = user;
        setUser(login);
        setIsLoading(false);
      })
      .catch((error) => console.log(error));
  }, []);

  if (isLoading) {
    return (
      <div>
        <h1>Loading...</h1>
      </div>
    );
  }
  if (isError) {
    return (
      <div>
        <h1>Error....</h1>
      </div>
    );
  }
  return (
    <div>
      <h1>{user}</h1>
    </div>
  );
};

export default MultipleReturns;



Short-Circuit :-

import React, { useState } from 'react';
// short-circuit evaluation
// ternary operator

const ShortCircuit = () => {
  const [text, setText] = useState('');
  const [isError, setIsError] = useState(false);
  // const firstValue = text || 'hello world';
  // const secondValue = text && 'hello world';

  return (
    <>
      {/* <h1>{firstValue}</h1>
      <h1>value : {secondValue}</h1> */}
      {/* {if(){console.log('hello world')}} */}
      <h1>{text || 'john doe'}</h1>
      <button className='btn' onClick={() => setIsError(!isError)}>
        toggle error
      </button>
      {isError && <h1>Error...</h1>}
      {isError ? (
        <p>there is an error...</p>
      ) : (
        <div>
          <h2>there is no error</h2>
        </div>
      )}
    </>
  );
};

export default ShortCircuit;



Toggle :-

import React, { useState, useEffect } from 'react';

const ShowHide = () => {
  const [show, setShow] = useState(false);
  return (
    <>
      <button className='btn' onClick={() => setShow(!show)}>
        show/hide
      </button>
      {show && <Item />}
    </>
  );
};

const Item = () => {
  const [size, setSize] = useState(window.innerWidth);
  const checkSize = () => {
    setSize(window.innerWidth);
  };
  useEffect(() => {
    window.addEventListener('resize', checkSize);
    return () => {
      window.removeEventListener('resize', checkSize);
    };
  }, []);

  return (
    <div style={{ marginTop: '2rem' }}>
      <h1>Window</h1>
      <h2>size : {size}</h2>
    </div>
  );
};

export default ShowHide;




-----------------------------------------------Forms--------------------------------------------------------------------------------------------


Controlled-Inputs :-

import React, { useState } from 'react';
// JS
// const input = document.getElementById('myText');
// const inputValue = input.value
// React
// value, onChange

const ControlledInputs = () => {
  const [firstName, setFirstName] = useState('');
  const [email, setEmail] = useState('');
  const [people, setPeople] = useState([]);

  const handleSubmit = (e) => {
    e.preventDefault();
    if (firstName && email) {
      const person = { id: new Date().getTime().toString(), firstName, email };
      console.log(person);
      setPeople((people) => {
        return [...people, person];
      });
      setFirstName('');
      setEmail('');
    } else {
      console.log('empty values');
    }
  };
  return (
    <>
      <article>
        <form className='form' onSubmit={handleSubmit}>
          <div className='form-control'>
            <label htmlFor='firstName'>Name : </label>
            <input
              type='text'
              id='firstName'
              name='firstName'
              value={firstName}
              onChange={(e) => setFirstName(e.target.value)}
            />
          </div>
          <div className='form-control'>
            <label htmlFor='email'>Email : </label>
            <input
              type='email'
              id='email'
              name='email'
              value={email}
              onChange={(e) => setEmail(e.target.value)}
            />
          </div>
          <button type='submit'>add person</button>
        </form>
        {people.map((person, index) => {
          const { id, firstName, email } = person;
          return (
            <div className='item' key={id}>
              <h4>{firstName}</h4>
              <p>{email}</p>
            </div>
          );
        })}
      </article>
    </>
  );
};

export default ControlledInputs;




Multiple-Inputs :-

import React, { useState } from 'react';
// JS
// const input = document.getElementById('myText');
// const inputValue = input.value
// React
// value, onChange

const ControlledInputs = () => {
  const [person, setPerson] = useState({ firstName: '', email: '', age: '' });
  const [people, setPeople] = useState([]);
  const handleChange = (e) => {
    const name = e.target.name;
    const value = e.target.value;
    setPerson({ ...person, [name]: value });
  };
  const handleSubmit = (e) => {
    e.preventDefault();
    if (person.firstName && person.email && person.age) {
      const newPerson = { ...person, id: new Date().getTime().toString() };
      setPeople([...people, newPerson]);
      setPerson({ firstName: '', email: '', age: '' });
    }
  };
  return (
    <>
      <article className='form'>
        <form>
          <div className='form-control'>
            <label htmlFor='firstName'>Name : </label>
            <input
              type='text'
              id='firstName'
              name='firstName'
              value={person.firstName}
              onChange={handleChange}
            />
          </div>
          <div className='form-control'>
            <label htmlFor='email'>Email : </label>
            <input
              type='email'
              id='email'
              name='email'
              value={person.email}
              onChange={handleChange}
            />
          </div>
          <div className='form-control'>
            <label htmlFor='age'>Age : </label>
            <input
              type='number'
              id='age'
              name='age'
              value={person.age}
              onChange={handleChange}
            />
          </div>
          <button type='submit' className='btn' onClick={handleSubmit}>
            add person
          </button>
        </form>
      </article>
      <article>
        {people.map((person) => {
          const { id, firstName, email, age } = person;
          return (
            <div key={id} className='item'>
              <h4>{firstName}</h4>
              <p>{email}</p>
              <p>{age}</p>
            </div>
          );
        })}
      </article>
    </>
  );
};

export default ControlledInputs;




-----------------------------------------------useRef--------------------------------------------------------------------------------------------

useRef - To manage uncontrolled input
         To target Dom Nodes and to change value without rerender
         You can use it in useEffect without any dependency as it does not call rerender

import React, { useEffect, useRef } from 'react';

// preserves value
// DOES NOT trigger re-render
// target DOM nodes/elements

const UseRefBasics = () => {
  const refContainer = useRef(null);

  const handleSubmit = (e) => {
    e.preventDefault();
    console.log(refContainer.current.value);
  };
  useEffect(() => {
    console.log(refContainer.current);
    refContainer.current.focus();
  });

  return (
    <>
      <form className='form' onSubmit={handleSubmit}>
        <div>
          <input type='text' ref={refContainer} />
        </div>
        <button type='submit'>submit</button>
      </form>
    </>
  );
};

export default UseRefBasics;

Usage - While scrolling you can use useRef to target a container and then scrollLeft() to scroll to the left
      - When we submit a form, any time on fresh load if we want our first input tag to be highlighted
      - Let any state be changed , If I want to do a specific task after any state change, in useEffect I can call useRef to do that task for any state change.
      - {current: null}
      - refContainer.current === <input type="text" nane="val" id="val"  ref={refContainer}/>

-----------------------------------------------useReducer--------------------------------------------------------------------------------------------

useReducer -  To simplify complex structure

const[state,dispatch] = useReducer(reducer,)  Either set second val here or separately //dispatch can be renamed

Takes reducer function , which takes state and action after dispatch as input


if(name)
{
dispatch({type:'TESTING'})
}
else {
}

Here dispatch is taking an Object which is the aCtion to be taken on old state.

In reducer we check the type of Dispatch. Remember Reducer must return some state.

if(action.type === 'TESTING')
{
    return {
      ...state,
      people: newPeople,
      isModalOpen: true,
      modalContent: 'item added',
    };
  }
return state;     //else return old state
};



-----------------------------------------------prop-drilling--------------------------------------------------------------------------------------------



import React, { useState } from 'react';
import { data } from '../../../data';
// more components
// fix - context api, redux (for more complex cases)

const PropDrilling = () => {
  const [people, setPeople] = useState(data);
  const removePerson = (id) => {
    setPeople((people) => {
      return people.filter((person) => person.id !== id);
    });
  };
  return (
    <section>
      <h3>prop drilling</h3>
      <List people={people} removePerson={removePerson} />
    </section>
  );
};

const List = ({ people, removePerson }) => {
  return (
    <>
      {people.map((person) => {
        return (
          <SinglePerson
            key={person.id}
            {...person}
            removePerson={removePerson}
          />
        );
      })}
    </>
  );
};

const SinglePerson = ({ id, name, removePerson }) => {
  return (
    <div className='item'>
      <h4>{name}</h4>
      <button onClick={() => removePerson(id)}>remove</button>
    </div>
  );
};

export default PropDrilling;


-----------------------------------------------useContext--------------------------------------------------------------------------------------------


useContext and Context API
createContext returns Producer and Consumer

Earlier we were using Context Api. Consumer was complex. useEffect reduced that complexity.


//Not using object to pass value
<PersonContext.Provider value='Hello'>

const SinglePerson = () => {
  const data = useContext(PersonContext);
  console.log(data);
  return (
    <div className='item'>
      <h4>{data}</h4>
    </div>
  );
};

<PersonContext.Provider value={{removeperson}}>

const SinglePerson = ({ id, name }) => {
  const { removePerson } = useContext(PersonContext);

  return (
    <div className='item'>
      <h4>{name}</h4>
      <button onClick={() => removePerson(id)}>remove</button>
    </div>
  );
};


Example use :-

import React, { useState, useContext } from 'react';
import { data } from '../../../data';
// more components
// fix - context api, redux (for more complex cases)

const PersonContext = React.createContext();
// two components - Provider, Consumer

const ContextAPI = () => {
  const [people, setPeople] = useState(data);
  const removePerson = (id) => {
    setPeople((people) => {
      return people.filter((person) => person.id !== id);
    });
  };
  return (
    <PersonContext.Provider value={{ removePerson, people }}>
      <h3>Context API / useContext</h3>
      <List />
    </PersonContext.Provider>
  );
};

const List = () => {
  const mainData = useContext(PersonContext);
  console.log(mainData);
  return (
    <>
      {mainData.people.map((person) => {
        return <SinglePerson key={person.id} {...person} />;
      })}
    </>
  );
};

const SinglePerson = ({ id, name }) => {
  const { removePerson } = useContext(PersonContext);

  return (
    <div className='item'>
      <h4>{name}</h4>
      <button onClick={() => removePerson(id)}>remove</button>
    </div>
  );
};

export default ContextAPI;



-----------------------------------------------Points--------------------------------------------------------------------------------------------


We are not allowed to use hooks within a regular function.
Either it needs to be a Component or Custom Hook.

rfc - React Functional Component
rfce - React Functional Component with Export
rfcep - With PropTypes
ptar - PropTypes array isRequired



-----------------------------------------------Data Fetch API--------------------------------------------------------------------------------------------

Api Data Fetching 

import React from 'react';
import PropTypes from 'prop-types';
import defaultImage from '../../../assets/default-image.jpeg';
const Product = ({ image, name, price }) => {
  const url = image && image.url;                                        // If image exists then only it will set image url.
  return (
    <article className='product'>
      <img src={url || defaultImage} alt={name || 'default name'} />    // <img src={IMAGE.URL || defaultImage} alt={name || 'default name'} /> When image is undefined it throws error.                                 	<h4>{name}</h4>                                                                                                                                                               
      <p>${price || 3.99}</p>
    </article>
  );
};

Product.propTypes = {
  image: PropTypes.object.isRequired,
  name: PropTypes.string.isRequired,
  price: PropTypes.number.isRequired,
};
// Product.defaultProps = {
//   name: 'default name',
//   price: 3.99,
//   image: defaultImage,
// };

export default Product;

__________________________________________________________________________________________________________________________________________________________________________________

Router

When you put path / /about, then both the page will be displayed. So use exact to prevent this.


index.js

import React from "react";
import ReactDOM from "react-dom/client";
import "./index.css";
import App from "./App";

const root = ReactDOM.createRoot(document.getElementById("root"));
root.render(
 <React.StrictMode>
  <Provider store={store}>
    <PersistGate loading={null} persistor={persistor}>
      <ThemeProvider>
        <UserDataProvider>
          <App />
        </UserDataProvider>
      </ThemeProvider>
    </PersistGate>
  </Provider>
 </React.StrictMode>
);


App.js

import React from "react";
import "./App.css";
import {
  BrowserRouter as Router,
  Route,
  Routes
} from "react-router-dom";

function App() {
  
  return (
    <div>
      <Router>
        <Navbar />
        <Routes>
        <Route path="/" element={<Layout />}>
          <Route index element={<Home />} />
          <Route path="blogs" element={<Blogs />} />
          <Route path="contact" element={<Contact />} />
          <Route path="*" element={<NoPage />} />
        </Route>
      </Routes>
      </Router>
    </div>
  );
}

export default App;


-----------------------------------------------memo useMemo useCallback--------------------------------------------------------------------------------------------


React.memo is a function that takes a Component and prevents its rerendering


useCallback - Want to rerender a function only when certain value changes in function, not when the state used in function changes.

useMemo() memorizes the function and deals with the value.


import React, { useState, useCallback, useMemo } from 'react'
import { useFetch } from '../../9-custom-hooks/final/2-useFetch'

const url = 'https://course-api.com/javascript-store-products'

// every time props or state changes, component re-renders
const calculateMostExpensive = (data) => {
  return (
    data.reduce((total, item) => {
      const price = item.fields.price
      if (price >= total) {
        total = price
      }
      return total
    }, 0) / 100
  )
}
const Index = () => {
  const { products } = useFetch(url)
  const [count, setCount] = useState(0)
  const [cart, setCart] = useState(0)

  const addToCart = useCallback(() => {
    setCart(cart + 1)
  }, [cart])

  const mostExpensive = useMemo(() => calculateMostExpensive(products), [
    products,
  ])
  return (
    <>
      <h1>Count : {count}</h1>
      <button className='btn' onClick={() => setCount(count + 1)}>
        click me
      </button>
      <h1 style={{ marginTop: '3rem' }}>cart : {cart}</h1>
      <h1>Most Expensive : ${mostExpensive}</h1>
      <BigList products={products} addToCart={addToCart} />
    </>
  )
}

const BigList = React.memo(({ products, addToCart }) => {
  // useEffect(() => {
  //   console.count('hello from big list');
  // });

  return (
    <section className='products'>
      {products.map((product) => {
        return (
          <SingleProduct
            key={product.id}
            {...product}
            addToCart={addToCart}
          ></SingleProduct>
        )
      })}
    </section>
  )
})

const SingleProduct = ({ fields, addToCart }) => {
  let { name, price } = fields
  price = price / 100
  const image = fields.image[0].url

  // useEffect(() => {
  //   console.count('hello from product');
  // });
  return (
    <article className='product'>
      <img src={image} alt={name} />
      <h4>{name}</h4>
      <p>${price}</p>
      <button onClick={addToCart}>add to cart</button>
    </article>
  )
}
export default Index



