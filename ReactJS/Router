Router

When you put path / and /about, then both the page will be displayed. So use exact to prevent this.

------------Basics------------

index.js

import React from "react";
import ReactDOM from "react-dom";
import { BrowserRouter } from "react-router-dom";
import App from "./App";

const rootElement = document.getElementById("root");

ReactDOM.render(
  <React.StrictMode>
    <BrowserRouter>
      <App />
    </BrowserRouter>
  </React.StrictMode>,
  rootElement
);


App.js

import React from 'react';
import { Routes, Route } from 'react-router-dom';
import Navbar from './Navbar';
import Home from './Home';
import About from './About';

const App = () => {
  return (
    <div>
      <Navbar />
      <Routes>
        <Route path="/" element={<Home />} />
        <Route path="/about" element={<About />} />
        <Route path="*" element={<PageNotFound />} /> {/* Display PageNotFound for unmatched routes */}
        {/* Add more routes as needed */}
      </Routes>
    </div>
  );
};

export default App;


Home.js

import React from 'react';

const Home = () => {
  return (
    <div>
      <h1>I am home</h1>
    </div>
  );
};

export default Home;

About.js

import React from 'react';

const About = () => {
  return (
    <div>
      <h1>About Page</h1>
      <p>This is the about page content.</p>
    </div>
  );
};

export default About;


Navbar.js

import React from 'react';
import { Link } from 'react-router-dom';

const Navbar = () => {
  return (
    <nav>
      <ul>
        <li>
          <Link to="/">Home</Link>
        </li>
        {/* Add more navigation links as needed */}
      </ul>
    </nav>
  );
};

export default Navbar;

------------NavLink------------

Navbar.js with NavLink

import React from 'react';
import { NavLink } from 'react-router-dom';
import './Navbar.css'; // Import CSS file for styling

const Navbar = () => {
  return (
    <nav>
      <ul>
        <li>
          <NavLink exact to="/" activeClassName="active">Home</NavLink>
        </li>
        <li>
          <NavLink exact to="/about" activeClassName="active">About</NavLink>
        </li>
        {/* Add more navigation links as needed */}
      </ul>
    </nav>
  );
};

export default Navbar;

Navbar.css

.navbar ul {
  list-style-type: none;
  margin: 0;
  padding: 0;
}

.navbar li {
  display: inline;
  margin-right: 10px;
}

.navbar a {
  text-decoration: none;
  color: blue; /* Default color */
}

.navbar a.active {
  color: green; /* Active route color */
}

------------Points for NavLink and active class------------

1) First Way

In React Router v6, the className prop of the NavLink component can be a function. When you provide a function to the className prop, React Router will call this function with an object containing various properties. One of these properties is isActive, which indicates whether the current location matches the to prop of the NavLink.

Here's how it works:

className Prop as a Function: When you pass a function to the className prop of NavLink, React Router will call this function with an object containing properties related to the link.

Object with Properties: The object passed to the function contains properties like isActive, href, location, etc. These properties provide information about the link and the current routing state.

Accessing isActive Property: Within the function, you can access the isActive property from the object to determine if the link is currently active.

Conditional Styling: Based on the value of isActive, you can return different class names from the function. If isActive is true, it means the link is active, and you can return a class name for active styling. If isActive is false, you can return a class name for inactive styling.

So, the className function receives an object from React Router, and it accesses the isActive property from this object to determine the appropriate class name to apply to the NavLink based on whether it's active or not. This mechanism allows for dynamic styling of navigation links based on the current routing state.

<NavLink 
  to="about"
  className={({ isActive }) => (isActive ? "activeClassName" : "className")}
>
  About
</NavLink>


2) Second Way

Here's how it works:

activeClassName (string): This prop specifies the name of the CSS class that will be applied to the NavLink when it is active. It's not a boolean; rather, it's a string value representing the class name.

When the NavLink is active (i.e., when the current URL matches the to prop of the NavLink), React Router will automatically add the class specified in activeClassName to the NavLink component.

You can define the styles for the active link in your CSS file using this class name. This allows you to apply specific styling to the active link, such as changing its color, background, or any other CSS properties you desire.

So, in the code you provided:

javascript
Copy code
<NavLink exact to="/" activeClassName="active">Home</NavLink>
The "active" string passed to the activeClassName prop is the name of the CSS class that will be applied to the NavLink when it's active. It's not a boolean; it's simply the name of the CSS class you want to use for styling the active link.

------------useNavigate and replace------------

In React Router v6, the useNavigate hook provides an option to replace the current entry in the history stack when navigating to a new route. This means that the current route will be replaced in the browser's history instead of creating a new entry.

Here's how to use the replace: true option with useNavigate:

Import useNavigate: Import the useNavigate hook from react-router-dom.
javascript
Copy code
import { useNavigate } from 'react-router-dom';
Call useNavigate to Get the Navigation Function: Inside your component, call useNavigate() to get the navigation function.
javascript
Copy code
const navigate = useNavigate();
Use the navigate Function with replace: true Option: Pass an object with the replace property set to true as the second argument to the navigate function.
javascript
Copy code
navigate('/about', { replace: true });
Here's a complete example:

javascript
Copy code
import React from 'react';
import { useNavigate } from 'react-router-dom';

const MyComponent = () => {
  const navigate = useNavigate();

  const handleButtonClick = () => {
    // Replace the current entry in the history stack with the "/about" route
    navigate('/about', { replace: true });
  };

  return (
    <div>
      <h1>My Component</h1>
      <button onClick={handleButtonClick}>Go to About</button>
    </div>
  );
};

export default MyComponent;
In this example, when the button is clicked, the handleButtonClick function calls navigate('/about', { replace: true }), causing the application to navigate to the "/about" route while replacing the current entry in the history stack. This means that if the user navigates back, they will skip the route that was replaced.

User
This means that if the user navigates back, they will skip the route that was replaced.

Points for NavLink and active class

Normal Navigation:

When you navigate to a new route without using replace: true, a new entry is added to the browser's history stack. This means that if the user clicks the back button in the browser, they will go back to the previous route.
Navigation with replace: true:

When you navigate to a new route using replace: true, the current entry in the history stack is replaced with the new route instead of adding a new entry. This means that the user won't see the replaced route when they click the back button in the browser.
Let's illustrate this with an example:

Normal Navigation:

Suppose the user navigates from "/home" to "/about" using a normal navigation.
The browser's history stack now contains two entries: "/home" and "/about".
If the user clicks the back button, they will go back to "/home" because it's the previous entry in the history stack.
Navigation with replace: true:

Now, suppose the user navigates from "/home" to "/about" using replace: true.
The browser's history stack contains only one entry: "/about", because the "/home" entry was replaced.
If the user clicks the back button, they will not see "/home" because it was replaced, so they will go back to the page before "/home", effectively skipping it.
In summary, using replace: true with useNavigate replaces the current entry in the browser's history stack with the new route, and if the user navigates back, they will skip the replaced route. This can be useful in certain scenarios where you don't want certain routes to appear in the navigation history.

------------useNavigate and number -1------------

In React Router v6, the useNavigate hook returns a navigation function that you can use to programmatically navigate to different routes within your components. If you use the navigation function with -1 as an argument, it will navigate back in the history stack by the specified number of steps.

Here's how you can use -1 with useNavigate:

Import useNavigate: First, import the useNavigate hook from react-router-dom.

import { useNavigate } from 'react-router-dom';
Call useNavigate to Get the Navigation Function: Inside your component, call useNavigate() to get the navigation function.
const navigate = useNavigate();
Use the navigate Function with -1 Argument: Pass -1 as an argument to the navigate function to navigate back in the history stack by one step.
navigate(-1);

Here's a complete example:

import React from 'react';
import { useNavigate } from 'react-router-dom';

const MyComponent = () => {
  const navigate = useNavigate();

  const handleGoBack = () => {
    // Navigate back in the history stack by one step
    navigate(-1);
  };

  return (
    <div>
      <h1>My Component</h1>
      <button onClick={handleGoBack}>Go Back</button>
    </div>
  );
};

export default MyComponent;
In this example, clicking the "Go Back" button will trigger the handleGoBack function, which calls navigate(-1), causing the application to navigate back in the history stack by one step. This is equivalent to clicking the back button in the browser.

------------Nested Routes------------

App.js

import React from 'react';
import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';
import Home from './Home';
import Products from './Products';
import Clothes from './Clothes';
import Makeup from './Makeup';

const App = () => {
  return (
    <Router>
      <Routes>
        <Route path="/" element={<Home />} />
        <Route path="/products" element={<Products />}>
          <Route index element={<Clothes />} /> //Optinal - To display Clothes content as we navigate to parent link of Products
          <Route path="clothes" element={<Clothes />} />
          <Route path="makeup" element={<Makeup />} />
        </Route>
      </Routes>
    </Router>
  );
};

export default App;

Home.js:

javascript
Copy code
import React from 'react';
import { Link } from 'react-router-dom';

const Home = () => {
  return (
    <div>
      <h1>Home Page</h1>
      <nav>
        <ul>
          <li><Link to="/products">Products</Link></li>
        </ul>
      </nav>
    </div>
  );
};

export default Home;

Products.js:

import React from 'react';
import { Link, Outlet } from 'react-router-dom';

const Products = () => {
  return (
    <div>
      <h1>Products Page</h1>
      <nav>
        <ul>
          <li><Link to="clothes">Clothes</Link></li>
          <li><Link to="makeup">Makeup</Link></li>
        </ul>
      </nav>
      <div className="product-container">
        <Outlet />
      </div>
    </div>
  );
};

export default Products;

Clothes.js:

import React from 'react';

const Clothes = () => {
  return (
    <div>
      <h2>Clothes</h2>
      <p>List of clothes...</p>
    </div>
  );
};

export default Clothes;

Makeup.js:

import React from 'react';

const Makeup = () => {
  return (
    <div>
      <h2>Makeup</h2>
      <p>List of makeup products...</p>
    </div>
  );
};

export default Makeup;
ProductPage.css:

CSS

.product-container {
  display: flex;
}

.product-container > div {
  flex: 1;
  margin-right: 20px;
}

------------useParams and Dynamic Route------------

useParams is a hook provided by React Router that allows you to access the parameters from the URL in your functional components. Here's a simple example demonstrating how to use useParams:

Let's say you have a route like this:

<Route path="/user/:userId" element={<UserDetails />} />

And in your UserDetails component, you want to access the userId parameter from the URL:

UserDetails.jsx
import React from 'react';
import { useParams } from 'react-router-dom';

const UserDetails = () => {
  // Accessing the parameters from the URL
  const { userId } = useParams();

  return (
    <div>
      <h2>User Details</h2>
      <p>User ID: {userId}</p>
    </div>
  );
};

export default UserDetails;
In this example:

We define a route with a parameter :userId, which represents a dynamic part of the URL.
In the UserDetails component, we use the useParams hook provided by React Router to access the parameters from the URL.
The useParams hook returns an object containing all the parameters defined in the route. We destructure the userId parameter from this object.
We then use the userId parameter in our component as needed.
So, if the URL is /user/123, the userId variable inside the UserDetails component will be '123'. This allows you to access dynamic parts of the URL and use them in your components for rendering or other logic.

------------useSearchParams------------

useSearchParams is a hook provided by react-router-dom that allows you to access and manipulate the search parameters (query parameters) in the URL within a React component.

Query parameters are key-value pairs that appear after the "?" character in a URL and are used to pass data between different pages or components. For example, in the URL /search?q=react, the query parameter is q with a value of react.

Here's why and when you might use useSearchParams:

1) Accessing Query Parameters: You can use useSearchParams to access query parameters from the URL within your component. This allows you to retrieve data passed via the URL and use it in your component logic.

2) Manipulating Query Parameters: You can also use useSearchParams to manipulate query parameters. For example, you can add, remove, or update query parameters dynamically based on user interactions or application state changes.

3) Building Search Functionality: useSearchParams is commonly used in search functionality where users input search queries and the application fetches data based on those queries. You can use useSearchParams to retrieve the search query from the URL and pass it to your data fetching logic.

import React from 'react';
import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';
import Users from './Users';
import UserDetails from './UserDetails'; // Assuming you have UserDetails component

const App = () => {
  return (
    <Router>
      <Routes>
        <Route path="/" element={<Users />} />
        <Route path="/user/:userId" element={<UserDetails />} /> {/* This should be in App.js */}
      </Routes>
    </Router>
  );
};

export default App;

import React from 'react';
import { Outlet, useSearchParams } from 'react-router-dom';

const Users = () => {
  const [searchParams, setSearchParams] = useSearchParams();

  const showActiveUsers = searchParams.get('filter') === 'active';

  return (
    <div>
      <h2>User 1</h2>
      <h2>User 2</h2>
      <h2>User 3</h2>
      <Outlet />
      <div>
        <button onClick={() => setSearchParams({ filter: 'active' })}>
          Active Users
        </button>
        <button onClick={() => setSearchParams({})}>
          Reset Filter
        </button>
      </div>
      {showActiveUsers ? (
        <h2>Showing active users</h2>
      ) : (
        <h2>Showing all users</h2>
      )}
    </div>
  );
};

export default Users;

import React from 'react';
import { useParams } from 'react-router-dom';

const UserDetails = () => {
  const { userId } = useParams(); // Accessing the userId parameter from the URL

  return (
    <div>
      <h2>User Details</h2>
      <p>User ID: {userId}</p>
      {/* Other user details can be displayed here */}
    </div>
  );
};

export default UserDetails;

------------Relative Links------------

A relative link is a link that does not start with forward slash and will inherit the closest Route in which they are rendered.

In React Router, a relative link or relative route refers to a route path that is specified relative to the parent route's path. It allows for nested routing within components while maintaining a hierarchical structure. Relative routes are used to define nested routes within parent routes, enabling more granular routing within a React application. This approach facilitates the creation of complex nested layouts and components, making it easier to manage and organize routes within the application's UI hierarchy.

------------Lazy Loading------------

To route to a lazy-loaded component in App.js, you can use the React.lazy() function to dynamically import the component, and then use it within the route configuration. Here's how you can do it:

javascript
Copy code
import React, { Suspense, lazy } from 'react';
import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';

// Import lazy-loaded components
const LazyComponent = lazy(() => import('./LazyComponent'));

function App() {
  return (
    <Router>
      <Routes>
        {/* Route to lazy-loaded component */}
        <Route
          path="/lazy"
          element={(
            <Suspense fallback={<div>Loading...</div>}>
              <LazyComponent />
            </Suspense>
          )}
        />
        {/* Other routes */}
      </Routes>
    </Router>
  );
}

export default App;
In this example:

We import the lazy function from React to lazily load the component.
We define a route to the lazy-loaded component using the Route component from react-router-dom.
Inside the element prop of the Route, we use the lazy-loaded component wrapped with Suspense component to handle the loading state.
While the lazy component is loading, the Suspense component will render the fallback content specified by the fallback prop.
Once the lazy component is loaded, React will render it as usual.
Ensure that the lazy-loaded component (LazyComponent in this example) is properly exported from its file. This lazy loading setup allows you to split your code into smaller chunks and load them on demand, improving the initial load time of your React application.

------------Authentication and Protected Routes------------

We have Navbar whivch has 3 links Home, Profile and Login. 
If without login we go to Profile page it will redirect to Login page. Profile page show User name and Logout Button to set user null and redirects to Home Page.
Using Context the user data is made available to all pages.
After Login, the Login url is not put in the history stack. So, you cannot go back to login page after log in.

Navbar.js

import { NavLink } from 'react-router-dom'
import { useAuth } from './auth'

export const Navbar = () => {
  const auth = useAuth()
  const navLinkStyles = ({ isActive }) => {
    return {
      fontWeight: isActive ? 'bold' : 'normal',
      textDecoration: isActive ? 'none' : 'underline'
    }
  }

  return (
    <nav className='primary-nav'>
      <NavLink to='/' style={navLinkStyles}>
        Home
      </NavLink>
      <NavLink to='/profile' style={navLinkStyles}>
        Profile
      </NavLink>
      {!auth.user && (
        <NavLink to='/login' style={navLinkStyles}>
          Login
        </NavLink>
      )}
    </nav>
  )
}


Home.js

import { useNavigate } from 'react-router-dom'

export const Home = () => {
  const navigate = useNavigate()
  return (
    <>
      <div>Home Page</div>
      <button onClick={() => navigate('order-summary')}>Place order</button>
    </>
  )
}

auth.js

import { useState, createContext, useContext } from 'react'

const AuthContext = createContext(null)

export const AuthProvider = ({ children }) => {
  const [user, setUser] = useState(null)

  const login = user => {
    setUser(user)
  }

  const logout = () => {
    setUser(null)
  }

  return (
    <AuthContext.Provider value={{ user, login, logout }}>
      {children}
    </AuthContext.Provider>
  )
}

export const useAuth = () => {
  return useContext(AuthContext)
}

Profile.js

import { useNavigate } from 'react-router-dom'
import { useAuth } from './auth'

export const Profile = () => {
  const navigate = useNavigate()
  const auth = useAuth()
  const handleLogout = () => {
    auth.logout()
    navigate('/')
  }
  return (
    <div>
      Welcome {auth.user}.<button onClick={handleLogout}>Logout</button>
    </div>
  )
}

Login.js

import { useState } from 'react'
import { useNavigate, useLocation } from 'react-router-dom'
import { useAuth } from './auth'

export const Login = () => {
  const [user, setUser] = useState('')
  const navigate = useNavigate()
  const location = useLocation()
  const auth = useAuth()

  const redirectPath = location.state?.path || '/'

  const handleLogin = () => {
    auth.login(user)
    navigate(redirectPath, { replace: true })
  }
  return (
    <div>
      <label>
        Username: <input type='text' onChange={e => setUser(e.target.value)} />
      </label>{' '}
      <button onClick={handleLogin}>Login</button>
    </div>
  )
}

RequireAuth.js

import { Navigate, useLocation } from 'react-router-dom'
import { useAuth } from './auth'

export const RequireAuth = ({ children }) => {
  const location = useLocation()
  const auth = useAuth()
  if (!auth.user) {
    return <Navigate to='/login' state={{ path: location.pathname }} />
  }
  return children
}

App.js

import React from 'react'
import { Routes, Route } from 'react-router-dom'
import { Home } from './components/Home'
import { Navbar } from './components/Navbar'
import { AuthProvider } from './components/auth'
import { Login } from './components/Login'
import { Profile } from './components/Profile'
import { RequireAuth } from './components/RequireAuth'

function App() {
  return (
    <AuthProvider>
      <Navbar />
      <Routes>
        <Route path='/' element={<Home />} />
        <Route path='/login' element={<Login />} />
        <Route
          path='/profile'
          element={
            <RequireAuth>
              <Profile />
            </RequireAuth>
          }
        />
        <Route path='*' element={<NoMatch />} />
      </Routes>
    </AuthProvider>
  )
}

export default App

__________________________________________________________________________________________________________________________________________________________
